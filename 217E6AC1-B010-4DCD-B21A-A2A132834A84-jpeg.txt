def getSquaredDistance (pointi, point2):
return round ( ( (point2 [O] - point1[0]) **2 + (point2 [1] - pointi[1]) **2),4).
def getDistanceFromPoints (centroids, datapoints):
distance from cluster = [] # [clusterl_distances, cluster2_distances,...]
intermediate result = [] for i in centroids:
for j in datapoints:
intermediate_result.append (getSquaredDistance (i j))
distance from cluster.append(intermediate resul
t)
# reset
intermediate result = [] intermediate_result as empty list
return distance_from_cluster
def printResult (centroids, point_to_cluster_mapping) : for i in range (len (centroids)) :
print ("Centroid", i,centroids [i]) for i in point_to_cluster_mapping:
print ("Point: ",i,"Cluster:", point_to_cluster_mapping[i]).
def kmeansclustering (centroids, datapoints):
Driver code for K-Means clustering
k = len (centroids)
distance_from_cluster getDistanceFromPoints (cenoids, datapoints) # [clusterl_distances, cluster2_distances,...]
# assign each datapoint to the nearest cluster
point_to_cluster_mapping = {} # point -> cluster
max valued cluster = 0 for i in range (len (datapoints)) :
point_to_cluster_mapping[i] = None # initial mapping as None
for cluster in range (len (centroids)) :
if distance from clusterscluster][i] < distance_from_cluster[max_valued_cluster][i]:
max_valued_cluster = cluster point_to_cluster_mapping[i] = max_valued_cluster